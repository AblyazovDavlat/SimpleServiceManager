//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Threading.Tasks;
using wpf_manager;

namespace ServiceClient.ServiceManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceManager.IServiceManager", CallbackContract=typeof(ServiceClient.ServiceManager.IServiceManagerCallback))]
    public interface IServiceManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/Connect", ReplyAction="http://tempuri.org/IServiceManager/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/Connect", ReplyAction="http://tempuri.org/IServiceManager/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/Disconnect", ReplyAction="http://tempuri.org/IServiceManager/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceManager/Disconnect", ReplyAction="http://tempuri.org/IServiceManager/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceManager/SendMsg")]
        void SendMsg(string msg, int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceManager/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceManager/SendServices")]
        void SendServices(List<wpf_manager.ServiceData> services, int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceManager/SendServices")]
        System.Threading.Tasks.Task SendServicesAsync(List<wpf_manager.ServiceData> services, int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceManager/SendChangeServiceStatus")]
        void SendChangeServiceStatus(string nameService, string status, int id);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceManager/SendChangeServiceStatus")]
        System.Threading.Tasks.Task SendChangeServiceStatusAsync(string nameService, string status, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceManager/MsgCallBack")]
        void MsgCallBack(string msg);

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IServiceManager/ChangeStatusCallBack")]
        void ChangeStatusCallBack(string nameService, string status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceManagerChannel : ServiceClient.ServiceManager.IServiceManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceManagerClient : System.ServiceModel.DuplexClientBase<ServiceClient.ServiceManager.IServiceManager>, ServiceClient.ServiceManager.IServiceManager {
        
        public ServiceManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }

        public void SendChangeServiceStatus(string nameService, string status, int id)
        {
            base.Channel.SendChangeServiceStatus(nameService, status, id);
        }

        public Task SendChangeServiceStatusAsync(string nameService, string status, int id)
        {
            return base.Channel.SendChangeServiceStatusAsync(nameService, status, id);
        }

        public void SendMsg(string msg, int id) {
            base.Channel.SendMsg(msg, id);
        }
        public System.Threading.Tasks.Task SendMsgAsync(string msg, int id)
        {
            return base.Channel.SendMsgAsync(msg, id);
        }


        public void SendServices(List<wpf_manager.ServiceData> services, int id)
        {
            base.Channel.SendServices(services, id);
        }


        public Task SendServicesAsync(List<ServiceData> services, int id)
        {
            return base.Channel.SendServicesAsync(services, id);
        }
    }
}
